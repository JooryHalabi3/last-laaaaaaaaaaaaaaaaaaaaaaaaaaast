let currentLang = localStorage.getItem('lang') || 'ar';
let misconductChart;
let dateFromPicker;
let dateToPicker;

// ุฅุนุฏุงุฏุงุช API
const API_BASE_URL = 'http://localhost:3001/api';

// ูุชุบูุฑุงุช ุนุงูุฉ
let misconductData = {
    labels: { ar: [], en: [] },
    datasets: []
};

function getFont() {
    return currentLang === 'ar' ? 'Tajawal' : 'Merriweather';
}

// ุฌูุจ ุจูุงูุงุช ุจูุงุบุงุช ุณูุก ุงูุชุนุงูู ูู ุงูุจุงู ุฅูุฏ
async function loadMisconductData() {
    console.log('๐ ุจุฏุก ุฌูุจ ุจูุงูุงุช ุจูุงุบุงุช ุณูุก ุงูุชุนุงูู...');
    
    try {
        // ุฌูุจ ุงูุจูุงูุงุช ูุจุงุดุฑุฉ ูู API
        const response = await fetch(`${API_BASE_URL}/misconduct/stats`);
        console.log('๐ก Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('๐ API Response:', result);
        
        if (result.success) {
            console.log('โ ูุฌุญ ุฌูุจ ุงูุจูุงูุงุชุ ูุนุงูุฌุฉ ุงูุจูุงูุงุช...');
            processMisconductData(result.data);
            
            // ุฅุนุงุฏุฉ ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู
            if (misconductChart) {
                misconductChart.destroy();
            }
            
            // ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู
            createChartDynamically();
            
        } else {
            throw new Error('ูุดู ูู ูุนุงูุฌุฉ ุงูุจูุงูุงุช ูู ุงูุฎุงุฏู');
        }
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุจูุงูุงุช:', error);
        showNoDataMessage();
    }
}

// ุฅูุดุงุก canvas ุฏููุงููููุงู ูุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู
function createChartDynamically() {
    const chartContainer = document.querySelector('.relative.w-full');
    console.log('๐ ุงูุจุญุซ ุนู chart container:', chartContainer);
    
    if (chartContainer) {
        // ุฅูุดุงุก canvas ุฌุฏูุฏ
        const newCanvas = document.createElement('canvas');
        newCanvas.id = 'misconductChart';
        newCanvas.width = 800;
        newCanvas.height = 400;
        newCanvas.style.width = '100%';
        newCanvas.style.height = '100%';
        
        // ูุณุญ ุงููุญุชูู ูุฅุถุงูุฉ canvas
        chartContainer.innerHTML = '';
        chartContainer.appendChild(newCanvas);
        
        console.log('โ ุชู ุฅูุดุงุก canvas ุฌุฏูุฏ:', newCanvas);
        
        try {
            misconductChart = createMisconductBarChart(newCanvas, misconductData);
            console.log('โ ุชู ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู ุจูุฌุงุญ');
        } catch (error) {
            console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู:', error);
            showNoDataMessage();
        }
    } else {
        console.error('โ ูู ูุชู ุงูุนุซูุฑ ุนูู chart container');
    }
}

// ุนุฑุถ ุฑุณุงูุฉ ุนุฏู ูุฌูุฏ ุจูุงูุงุช
function showNoDataMessage() {
    const chartContainer = document.querySelector('.relative.w-full');
    if (chartContainer) {
        chartContainer.innerHTML = `
            <div class="flex items-center justify-center h-full">
                <div class="text-center">
                    <div class="text-gray-500 text-6xl mb-4">๐</div>
                    <h3 class="text-xl font-semibold text-gray-700 mb-2">ูุง ุชูุฌุฏ ุจูุงุบุงุช ุณูุก ุชุนุงูู</h3>
                    <p class="text-gray-500 mb-4">ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ุจูุงุบุงุช ุณูุก ุชุนุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช</p>
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <p class="text-blue-800 text-sm">
                            ๐ก <strong>ูุตูุญุฉ:</strong> ุชุฃูุฏ ูู ูุฌูุฏ ุดูุงูู ุจููุน "ุงูููุงุฏุฑ ุงูุตุญูุฉ ูุณููููู" ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
                        </p>
                    </div>
                    <button onclick="loadMisconductData()" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">
                        ุฅุนุงุฏุฉ ุงููุญุงููุฉ
                    </button>
                </div>
            </div>
        `;
    }
}

// ูุนุงูุฌุฉ ุงูุจูุงูุงุช ูู ุงูุจุงู ุฅูุฏ
function processMisconductData(data) {
    console.log('๐ง ูุนุงูุฌุฉ ุงูุจูุงูุงุช ุงููุณุชููุฉ:', data);
    
    const departments = data.byDepartment || [];
    console.log('๐ ุงูุจูุงูุงุช ุงูุฎุงู ุญุณุจ ุงููุณู:', departments);
    
    // ุฅุฐุง ูู ุชูุฌุฏ ุจูุงูุงุชุ ุนุฑุถ ุฑุณุงูุฉ
    if (departments.length === 0) {
        showNoDataMessage();
        return;
    }
    
    console.log('๐ ุนุฏุฏ ุงูุฃูุณุงู ุงูุชู ูุฏููุง ุจูุงุบุงุช:', departments.length);
    
    // ุชุญููู ุงูุจูุงูุงุช ุฅูู ุงูุชูุณูู ุงููุทููุจ ููุฑุณู ุงูุจูุงูู
    misconductData.labels.ar = departments.map(dept => dept.DepartmentName);
    misconductData.labels.en = departments.map(dept => getEnglishDepartmentName(dept.DepartmentName));
    
    misconductData.datasets = [{
        label: { ar: 'ุนุฏุฏ ุงูุจูุงุบุงุช', en: 'Number of Reports' },
        data: departments.map(dept => dept.reportCount),
        backgroundColor: '#3B82F6',
        borderColor: '#2563EB',
        borderWidth: 1,
        borderRadius: 5,
    }];
    
    console.log('๐ ุงูุจูุงูุงุช ุงูููุงุฆูุฉ ููุฑุณู ุงูุจูุงูู:', misconductData);
}

// ุงูุญุตูู ุนูู ุงุณู ุงููุณู ุจุงูุฅูุฌููุฒูุฉ
function getEnglishDepartmentName(arabicName) {
    const departmentMap = {
        'ูุณู ุงูุทูุงุฑุฆ': 'Emergency Department',
        'ูุณู ุงูุฌุฑุงุญุฉ ุงูุนุงูุฉ': 'General Surgery Department',
        'ูุณู ุงูุตูุฏููุฉ': 'Pharmacy Department',
        'ูุณู ุงูุนูุงูุฉ ุงููุฑูุฒุฉ': 'Intensive Care Unit',
        'ูุณู ุงูุฌุฑุงุญุฉ ูุณุงุก': 'Women\'s Surgery Department',
        'ูุณู ุงูุจุงุทููุฉ': 'Internal Medicine Department',
        'ูุณู ุงูุฃุทูุงู': 'Pediatrics Department',
        'ูุณู ุงูุนุธุงู': 'Orthopedics Department',
        'ูุณู ุงูููุจ': 'Cardiology Department',
        'ูุณู ุงููุฎ ูุงูุฃุนุตุงุจ': 'Neurology Department',
        'ูุณู ุงูุฃุดุนุฉ': 'Radiology Department',
        'ูุณู ุงููุฎุชุจุฑ': 'Laboratory Department',
        'ูุณู ุงูุชูุฑูุถ': 'Nursing Department',
        'ูุณู ุงูุฅุฏุงุฑุฉ': 'Administration Department'
    };
    
    return departmentMap[arabicName] || arabicName;
}

// ุงูุญุตูู ุนูู ููู ุงูุชุฎุตุต
function getSpecialtyColor(specialty) {
    const colors = {
        'ุทุจูุจ': '#3B82F6',
        'ููุงุฑุณ ุตุญู': '#60A5FA',
        'ููุฑุถุฉ': '#93C5FD',
        'ุชูุฑูุถ': '#93C5FD',
        'ุบูุฑ ูุญุฏุฏ': '#CBD5E1'
    };
    return colors[specialty] || '#3B82F6';
}

// ุงูุญุตูู ุนูู ููู ุญุฏูุฏ ุงูุชุฎุตุต
function getSpecialtyBorderColor(specialty) {
    const colors = {
        'ุทุจูุจ': '#2563EB',
        'ููุงุฑุณ ุตุญู': '#3B82F6',
        'ููุฑุถุฉ': '#60A5FA',
        'ุชูุฑูุถ': '#60A5FA',
        'ุบูุฑ ูุญุฏุฏ': '#94A3B8'
    };
    return colors[specialty] || '#2563EB';
}

// ุฅุธูุงุฑ ุฑุณุงูุฉ ุฎุทุฃ
function showError(message) {
    console.error('โ ุฎุทุฃ:', message);
}

// ===================== Excel Import (similar to report-937) =====================
// ุชุทุจูุน ูุต ุนุฑุจู/ุฅูุฌููุฒู ุฎููู
const AR_DIACRITICS = /[\u064B-\u0652]/g;
function normalizeText(s) {
    return String(s || '')
        .replace(AR_DIACRITICS, '')            // ุฅุฒุงูุฉ ุงูุชุดููู
        .replace(/\u0640/g, '')               // ุฅุฒุงูุฉ ุงูุชุทููู
        .replace(/[ุฃุฅุขูฑ]/g, 'ุง')               // ุชูุญูุฏ ุงูุฃูู ุจููุฒุฉ
        .replace(/ู/g, 'ู')                    // ุฃูู ููุตูุฑุฉ โ ูุงุก
        .replace(/ุฆ/g, 'ู')                    // ููุฒุฉ ุนูู ูุงุก โ ูุงุก
        .replace(/ุค/g, 'ู')                    // ููุฒุฉ ุนูู ูุงู โ ูุงู
        .replace(/ุฉ/g, 'ู')                    // ุชุงุก ูุฑุจูุทุฉ โ ูุงุก (ูุชูุงูู ูุชุงุจุงุช "ุงูุงุฏุงุฑู")
        .toLowerCase()
        .trim()
        .replace(/\s+/g, ' ');
}

// ุฎุฑูุทุฉ ูุฑุงุฏูุงุช ุงูุฃูุณุงู -> ุงุณู ุนุฑุจู ูุงูููู ููุง ูุธูุฑ ูู ุงูุฑุณู
const deptSynonyms = [
    { keys: ['emergency', 'er', 'ูุณู ุงูุทูุงุฑุฆ', 'ุงูุทูุงุฑุฆ'], canonical: 'ูุณู ุงูุทูุงุฑุฆ' },
    { keys: ['general surgery', 'surgery', 'ูุณู ุงูุฌุฑุงุญุฉ ุงูุนุงูุฉ', 'ุงูุฌุฑุงุญุฉ ุงูุนุงูุฉ', 'ุงูุฌุฑุงุญุฉ'], canonical: 'ูุณู ุงูุฌุฑุงุญุฉ ุงูุนุงูุฉ' },
    { keys: ['pharmacy', 'ูุณู ุงูุตูุฏููุฉ', 'ุงูุตูุฏููุฉ'], canonical: 'ูุณู ุงูุตูุฏููุฉ' },
    { keys: ['icu', 'intensive care', 'ูุณู ุงูุนูุงูุฉ ุงููุฑูุฒุฉ', 'ุงูุนูุงูุฉ ุงููุฑูุฒุฉ'], canonical: 'ูุณู ุงูุนูุงูุฉ ุงููุฑูุฒุฉ' },
    { keys: ["women's surgery", 'ูุณู ุงูุฌุฑุงุญุฉ ูุณุงุก', 'ุฌุฑุงุญุฉ ูุณุงุก'], canonical: 'ูุณู ุงูุฌุฑุงุญุฉ ูุณุงุก' },
    { keys: ['internal medicine', 'ูุณู ุงูุจุงุทููุฉ', 'ุงูุจุงุทููุฉ'], canonical: 'ูุณู ุงูุจุงุทููุฉ' },
    { keys: ['pediatrics', 'ูุณู ุงูุฃุทูุงู', 'ุงูุฃุทูุงู', 'ุงุทูุงู'], canonical: 'ูุณู ุงูุฃุทูุงู' },
    { keys: ['orthopedics', 'ูุณู ุงูุนุธุงู', 'ุงูุนุธุงู', 'ุนุธุงู'], canonical: 'ูุณู ุงูุนุธุงู' },
    { keys: ['cardiology', 'ูุณู ุงูููุจ', 'ุงูููุจ', 'ููุจ'], canonical: 'ูุณู ุงูููุจ' },
    { keys: ['neurology', 'ูุณู ุงููุฎ ูุงูุฃุนุตุงุจ', 'ุงููุฎ ูุงูุฃุนุตุงุจ', 'ุงุนุตุงุจ', 'ุงูุฃุนุตุงุจ'], canonical: 'ูุณู ุงููุฎ ูุงูุฃุนุตุงุจ' },
    { keys: ['radiology', 'ูุณู ุงูุฃุดุนุฉ', 'ุงูุฃุดุนุฉ', 'ุงูุงุดุนุฉ'], canonical: 'ูุณู ุงูุฃุดุนุฉ' },
    { keys: ['laboratory', 'lab', 'ูุณู ุงููุฎุชุจุฑ', 'ุงููุฎุชุจุฑ'], canonical: 'ูุณู ุงููุฎุชุจุฑ' },
    { keys: ['nursing', 'ูุณู ุงูุชูุฑูุถ', 'ุงูุชูุฑูุถ', 'ุชูุฑูุถ'], canonical: 'ูุณู ุงูุชูุฑูุถ' },
    { keys: ['administration', 'ูุณู ุงูุฅุฏุงุฑุฉ', 'ุงูุฅุฏุงุฑุฉ', 'ุงูุงุฏุงุฑุฉ'], canonical: 'ูุณู ุงูุฅุฏุงุฑุฉ' }
];

function mapToArabicDepartmentName(raw) {
    const base = typeof raw === 'string' ? String(raw).split(/[\/\-โโ\(,ุ]|\s+-\s+/)[0] : raw;
    const n = normalizeText(base);
    if (!n) return '';
    for (const entry of deptSynonyms) {
        for (const key of entry.keys) {
            if (n.includes(normalizeText(key))) return entry.canonical;
        }
    }
    // ูุญุงููุฉ ุชูุญูุฏ ุตูุบุฉ "ูุณู X"
    if (n.startsWith('ูุณู ')) {
        const tryName = n.replace(/^ูุณู\s+/, '');
        for (const entry of deptSynonyms) {
            for (const key of entry.keys) {
                const nk = normalizeText(key).replace(/^ูุณู\s+/, '');
                if (tryName.includes(nk)) return entry.canonical;
            }
        }
    }
    return base; // ูู ูุง ูุฏุฑูุง ูุทุงุจูุ ุงุญุชูุธ ุจุงููุต ุงูุฃุณุงุณู ููุง ูู
}

function getAliasesForDepartmentName(canonicalAr) {
    const entry = deptSynonyms.find(e => e.canonical === canonicalAr);
    if (!entry) return [canonicalAr];
    const extra = entry.keys.map(k => String(k));
    // ุฃุถู ุงูุตูุบุฉ ุจุฏูู "ูุณู " ุฅู ููุฌุฏุช
    const short = canonicalAr.replace(/^ูุณู\s+/, '');
    const out = new Set([canonicalAr, short, ...extra]);
    return Array.from(out);
}

function findDeptKeyFromRows(rows) {
    if (!rows || !rows.length) return null;
    const candidates = [
        'ุงููุณู', 'ุงูุฅุฏุงุฑุฉ', 'ุงูุงุฏุงุฑุฉ', 'ุงููุณู/ุงูุฅุฏุงุฑุฉ',
        'ุงุณู ุงููุนูู', 'ุงููุณู ุงููุนูู', 'ุงูุฌูุฉ', 'ุงูุฌูุฉ ุงููุนููุฉ', 'ุงุณู ุงููุณู', 'ุงูุงุฏุงุฑุฉ ุงููุนููุฉ',
        'department', 'section', 'unit', 'dept'
    ];
    const keys = Object.keys(rows[0] || {});
    for (const k of keys) {
        const nk = normalizeText(k);
        if (candidates.some(c => nk.includes(normalizeText(c)))) return k;
    }
    return null;
}

function extractDeptFromReportForCell(text) {
    if (!text) return '';
    const lower = String(text).toLowerCase();
    const idx = lower.indexOf('report for:');
    if (idx === -1) return '';
    const after = text.substring(idx + 'report for:'.length).trim();
    return after.split('/')[0].trim();
}

function readExcelFileForRows(file) {
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                if (typeof XLSX === 'undefined') {
                    console.error('XLSX library not loaded.');
                    return resolve({ deptHint: '', rows: [] });
                }
                const data = new Uint8Array(e.target.result);
                const wb = XLSX.read(data, { type: 'array' });
                const sheet = wb.Sheets[wb.SheetNames[0]];
                const aoa = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: '' });
                const rows = XLSX.utils.sheet_to_json(sheet, { defval: '' });

                // ุญุงูู ุงุณุชูุชุงุฌ ุงููุณู ูู ุฎูุงูุง ุชุญุชูู report for:
                let deptHint = '';
                for (const row of aoa) {
                    for (const cell of row) {
                        if (typeof cell === 'string' && cell.toLowerCase().includes('report for:')) {
                            deptHint = extractDeptFromReportForCell(cell);
                            break;
                        }
                    }
                    if (deptHint) break;
                }
                if (!deptHint) {
                    deptHint = file.name.replace(/\.[^.]+$/, '').replace(/[_]+/g, ' ').trim();
                }

                resolve({ deptHint, rows });
            } catch (err) {
                console.error('Failed to read file:', file.name, err);
                resolve({ deptHint: '', rows: [] });
            }
        };
        reader.readAsArrayBuffer(file);
    });
}

// ูุญุงููุฉ ุงูุชุดุงู ุงุณู ุนููุฏ ุงูุชุตููู ุฏุงุฎู ุงูุตููู
function findCategoryKeyFromRows(rows) {
    if (!rows || !rows.length) return null;
    const candidates = [
        'ุชุตููู ุงูุจูุงุบ', 'ุงูุชุตููู', 'ุชุตููู', 'ููุน ุงูุดููู', 'ููุน ุงูุจูุงุบ', 'classification',
        'ูุตู ุงูุจูุงุบ', 'ุงููุตู', 'ูุตู', 'ุณุจุจ ุงูุจูุงุบ', 'ุงูุณุจุจ', 'ุงูููุงุญุธุฉ', 'ุงูููุงุญุธู',
        'category', 'complaint category', 'complaint type', 'type'
    ];
    const keys = Object.keys(rows[0] || {});
    for (const k of keys) {
        const nk = normalizeText(k);
        if (candidates.some(c => nk.includes(normalizeText(c)))) return k;
    }
    return null;
}

// ุชุตููู ุงูุจูุงุบ ุงููุทููุจ ููุท
const MISCONDUCT_KEYWORDS = [
    'ุณููู ูุธ ูุฑูุน ุงูุตูุช ุนูู ุงููุณุชููุฏ ุฃุซูุงุก ุงูุชุนุงูู ูุนู'
];

function isMisconductValue(value) {
    const n = normalizeText(value);
    if (!n) return false;
    return MISCONDUCT_KEYWORDS.some(k => n.includes(normalizeText(k)));
}

function isMisconductRow(row) {
    if (!row) return false;
    const catKey = findCategoryKeyFromRows([row]);
    if (catKey) {
        return isMisconductValue(row[catKey]);
    }
    // ูู ูู ูุฌุฏ ุนููุฏ ุชุตููู ูุงุถุญุ ูุญุงูู ูุญุต ูู ุงูููู ุงููุตูุฉ ูู ุงูุตู
    for (const v of Object.values(row)) {
        if (typeof v === 'string' && isMisconductValue(v)) return true;
    }
    return false;
}

async function importMisconductExcelFiles(files) {
    const aggregate = new Map(); // ArabicDept -> count
    const filteredRowsAll = [];   // ููุงุณุชุฎุฏุงู ูู ุตูุญุฉ ุงูุชูุงุตูู

    for (const f of files) {
        const rec = await readExcelFileForRows(f);
        const deptKey = findDeptKeyFromRows(rec.rows);
        if (deptKey) {
            for (const r of rec.rows) {
                if (!isMisconductRow(r)) continue; // ุงุญุชุณุจ ููุท ุงูุจูุงุบุงุช ุฐุงุช ุนูุงูุฉ ุจุณูุก ุงูุชุนุงูู
                const deptRaw = r[deptKey];
                const deptAr = mapToArabicDepartmentName(deptRaw);
                if (!deptAr) continue;
                aggregate.set(deptAr, (aggregate.get(deptAr) || 0) + 1);
                filteredRowsAll.push(r);
            }
        } else {
            // fallback: ุงุณุชุฎุฏู ุงูุชูููุญ ูู ูุญุชูู ุงูููู/ุงุณูู ูุนุฏ ููุท ุงูุตููู ุงููุชุนููุฉ ุจุณูุก ุงูุชุนุงูู
            const deptAr = mapToArabicDepartmentName(rec.deptHint);
            const rowsFiltered = Array.isArray(rec.rows) ? rec.rows.filter(isMisconductRow) : [];
            const cnt = rowsFiltered.length;
            if (deptAr && cnt > 0) {
                aggregate.set(deptAr, (aggregate.get(deptAr) || 0) + cnt);
                filteredRowsAll.push(...rowsFiltered.map(r => ({ ...r, __deptHint: deptAr })));
            }
        }
    }

    // ุงุจูู ุงููุงุฆูุฉ ููุท ูู ุงูุฃูุณุงู ุงูุชู ููุง ููู (>0) ูุน ุงูุญูุงุธ ุนูู ุงูุชุฑุชูุจ ุงููุฏูู ุฅู ููุฌุฏ
    const existing = Array.isArray(misconductData.labels?.ar) ? misconductData.labels.ar.slice() : [];
    const positiveEntries = Array.from(aggregate.entries()).filter(([_, v]) => Number(v) > 0);
    const positiveKeys = positiveEntries.map(([k]) => k);

    const orderedFromExisting = existing.filter(name => aggregate.has(name) && Number(aggregate.get(name)) > 0);
    const rest = positiveKeys.filter(k => !existing.includes(k));
    const labelsAr = orderedFromExisting.concat(rest);
    const labelsEn = labelsAr.map(getEnglishDepartmentName);

    const values = labelsAr.map(name => Number(aggregate.get(name) || 0));

    misconductData.labels.ar = labelsAr;
    misconductData.labels.en = labelsEn;
    if (!Array.isArray(misconductData.datasets) || !misconductData.datasets.length) {
        misconductData.datasets = [{
            label: { ar: 'ุนุฏุฏ ุงูุจูุงุบุงุช', en: 'Number of Reports' },
            data: values,
            backgroundColor: '#3B82F6',
            borderColor: '#2563EB',
            borderWidth: 1,
            borderRadius: 5
        }];
    } else {
        misconductData.datasets[0].data = values;
    }

    // ุฃุนุฏ ุฑุณู ุงููุฎุทุท
    if (misconductChart) {
        misconductChart.destroy();
        misconductChart = null;
    }
    createChartDynamically();
    // ุฎุฒูู ุงูุตููู ููุงุณุชุฎุฏุงู ูู ุตูุญุฉ ุงูุชูุงุตูู
    try { localStorage.setItem('misconduct:rows:v1', JSON.stringify(filteredRowsAll)); } catch {}
    console.log('โ ุชู ุงุณุชูุฑุงุฏ ูููุงุช ุงูุฅูุณู ูุชุญุฏูุซ ุงูุฑุณู.');
}

// ุชุตุฏูุฑ ุงูุชูุฑูุฑ
async function exportMisconductReport() {
    try {
        console.log('๐ค ุจุฏุก ุชุตุฏูุฑ ุชูุฑูุฑ ุจูุงุบุงุช ุณูุก ุงูุชุนุงูู...');
        
        const fromDate = dateFromPicker && dateFromPicker.selectedDates[0] ? dateFromPicker.selectedDates[0].toISOString().split('T')[0] : '';
        const toDate = dateToPicker && dateToPicker.selectedDates[0] ? dateToPicker.selectedDates[0].toISOString().split('T')[0] : '';
        
        const params = new URLSearchParams();
        if (fromDate) params.append('fromDate', fromDate);
        if (toDate) params.append('toDate', toDate);
        
        console.log('๐ ุฅุฑุณุงู ุทูุจ ุชุตุฏูุฑ ุฅูู:', `${API_BASE_URL}/misconduct/export-data?${params}`);
        
        const response = await fetch(`${API_BASE_URL}/misconduct/export-data?${params}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const blob = await response.blob();
        
        // ุฅูุดุงุก ุฑุงุจุท ุชุญููู
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `misconduct-report-${new Date().toISOString().split('T')[0]}.xlsx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        console.log('โ ุชู ุชุตุฏูุฑ ุงูุชูุฑูุฑ ุจูุฌุงุญ');
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชุตุฏูุฑ ุงูุชูุฑูุฑ:', error);
        showError('ูุดู ูู ุชุตุฏูุฑ ุงูุชูุฑูุฑ: ' + error.message);
    }
}

function createMisconductBarChart(ctx, chartData) {
    console.log('๐จ ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู ูุน ุงูุจูุงูุงุช:', chartData);
    
    if (!ctx) {
        console.error('โ Canvas context ุบูุฑ ุตุงูุญ');
        return null;
    }
    
    console.log('๐จ Canvas ููุฌูุฏุ ุจุฏุก ุฅูุดุงุก ุงูุฑุณู ุงูุจูุงูู...');
    console.log('๐จ Canvas element:', ctx);
    console.log('๐จ Canvas width:', ctx.width);
    console.log('๐จ Canvas height:', ctx.height);
    
    const datasets = chartData.datasets.map(dataset => ({
        label: dataset.label[currentLang],
        data: dataset.data,
        backgroundColor: dataset.backgroundColor,
        borderColor: dataset.borderColor,
        borderWidth: dataset.borderWidth,
        borderRadius: dataset.borderRadius,
    }));

    const chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: chartData.labels[currentLang],
            datasets: datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    rtl: currentLang === 'ar',
                    bodyFont: { family: getFont() },
                    titleFont: { family: getFont() }
                }
            },
            scales: {
                x: {
                    ticks: {
                        font: {
                            family: getFont(),
                            size: 12,
                            color: '#333'
                        },
                        maxRotation: 45,
                        minRotation: 0
                    },
                    grid: { display: false },
                    barPercentage: 0.8,
                    categoryPercentage: 0.7
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        font: {
                            family: getFont(),
                            size: 12,
                            color: '#333'
                        }
                    },
                    grid: {
                        drawBorder: false,
                        color: 'rgba(0, 0, 0, 0.1)',
                    },
                }
            }
        }
    });
    // ุงุฌุนู ุงูุฃุนูุฏุฉ ูุงุจูุฉ ููููุฑ ููุชุญ ุตูุญุฉ ุงูุชูุงุตูู
    chart.options.onClick = function(evt, elements){
        if (!elements || !elements.length) return;
        const index = elements[0].index;
        const department = chart.data.labels[index];
        const aliases = getAliasesForDepartmentName(department);
        try {
            localStorage.setItem('misconduct:selectedDepartment', department);
            localStorage.setItem('misconduct:selectedDepartmentAliases', JSON.stringify(aliases));
        } catch {}
        window.location.href = 'misconduct-details.html?department=' + encodeURIComponent(department);
    };
    return chart;
}

function updateAllContent() {
    const font = getFont();

    // Update Misconduct Chart
    if (misconductChart) {
        misconductChart.data.labels = misconductData.labels[currentLang];
        misconductChart.data.datasets.forEach((dataset, index) => {
            dataset.label = misconductData.datasets[index].label[currentLang]; 
        });
        misconductChart.options.plugins.legend.labels.font.family = font;
        misconductChart.options.plugins.tooltip.rtl = currentLang === 'ar';
        misconductChart.options.plugins.tooltip.bodyFont.family = font;
        misconductChart.options.plugins.tooltip.titleFont.family = font;
        misconductChart.options.scales.x.ticks.font.family = font;
        misconductChart.options.scales.y.ticks.font.family = font;
        misconductChart.update();
    }

    // Update Flatpickr locale
    if (dateFromPicker) {
        dateFromPicker.set('locale', currentLang === 'ar' ? 'ar' : 'default');
        dateFromPicker.set('enableRtl', currentLang === 'ar');
        document.getElementById('dateFrom').placeholder = currentLang === 'ar' ? 'ุงุฎุชุฑ ุงูุชุงุฑูุฎ' : 'Select Date';
        document.getElementById('dateFrom').setAttribute('data-ar', 'ุงุฎุชุฑ ุงูุชุงุฑูุฎ');
        document.getElementById('dateFrom').setAttribute('data-en', 'Select Date');
    }
    if (dateToPicker) {
        dateToPicker.set('locale', currentLang === 'ar' ? 'ar' : 'default');
        dateToPicker.set('enableRtl', currentLang === 'ar');
        document.getElementById('dateTo').placeholder = currentLang === 'ar' ? 'ุงุฎุชุฑ ุงูุชุงุฑูุฎ' : 'Select Date';
        document.getElementById('dateTo').setAttribute('data-ar', 'ุงุฎุชุฑ ุงูุชุงุฑูุฎ');
        document.getElementById('dateTo').setAttribute('data-en', 'Select Date');
    }
}

function applyLanguage(lang) {
    currentLang = lang;
    localStorage.setItem('lang', lang);
    document.documentElement.lang = lang;
    document.body.dir = lang === 'ar' ? 'rtl' : 'ltr';
    document.body.classList.remove('lang-ar', 'lang-en');
    document.body.classList.add(lang === 'ar' ? 'lang-ar' : 'lang-en');

    document.querySelectorAll('[data-ar], [data-en]').forEach(el => {
        const textContent = el.getAttribute(`data-${lang}`);
        if (textContent) {
            el.textContent = textContent;
        }
    });

    // Update language toggle text
    const langTextSpan = document.getElementById('langText');
    if (langTextSpan) {
        langTextSpan.textContent = lang === 'ar' ? 'ุงูุนุฑุจูุฉ | English' : 'English | ุงูุนุฑุจูุฉ';
    }

    updateAllContent();
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('๐ ุจุฏุก ุชุญููู ุตูุญุฉ ุจูุงุบุงุช ุณูุก ุงูุชุนุงูู...');
    
    // ูุญุต ูุฌูุฏ Chart.js
    console.log('๐ ูุญุต Chart.js:', typeof Chart);
    console.log('๐ ูุญุต ChartDataLabels:', typeof ChartDataLabels);
    
    // ูุญุต ูุฌูุฏ canvas
    const canvas = document.getElementById('misconductChart');
    console.log('๐ ูุญุต canvas ุนูุฏ ุงูุชุญููู:', canvas);
    
    // ูุญุต ุฌููุน canvas ุงูููุฌูุฏุฉ
    const allCanvas = document.querySelectorAll('canvas');
    console.log('๐ ุฌููุน canvas ุงูููุฌูุฏุฉ:', allCanvas);
    console.log('๐ ุนุฏุฏ canvas:', allCanvas.length);
    
    const langToggleBtn = document.getElementById('langToggle');
    const exportReportBtn = document.getElementById('exportReportBtn');
    const applyFilterBtn = document.getElementById('applyFilterBtn');

    // Initialize Flatpickr
    dateFromPicker = flatpickr("#dateFrom", {
        dateFormat: "Y-m-d",
        locale: currentLang === 'ar' ? 'ar' : 'default',
        enableRtl: currentLang === 'ar',
        maxDate: 'today'
    });
    dateToPicker = flatpickr("#dateTo", {
        dateFormat: "Y-m-d",
        locale: currentLang === 'ar' ? 'ar' : 'default',
        enableRtl: currentLang === 'ar',
        maxDate: 'today'
    });

    // ุฅุถุงูุฉ ูุณุชูุนู ุงูุฃุญุฏุงุซ ููููุงุชุฑ (ุฅุฐุง ูุฒู ุงูุฃูุฑ ูุงุญูุงู)

    // ุชุญููู ุงูุจูุงูุงุช ุงูุฃูููุฉ
    loadMisconductData();

    // Now, call applyLanguage to set initial language and update all content
    applyLanguage(currentLang);

    // Set active sidebar link based on current page
    const sidebarLinks = document.querySelectorAll('.sidebar-menu .menu-link');
    sidebarLinks.forEach(link => {
        link.parentElement.classList.remove('active');
        if (link.getAttribute('href') === 'misconduct.html') {
            link.parentElement.classList.add('active');
        }
    });

    // Apply Filter button functionality
    if (applyFilterBtn) {
        applyFilterBtn.addEventListener('click', () => {
            console.log('๐ ุชุทุจูู ุงูููุชุฑุฉ...');
            loadMisconductData(); // ุฅุนุงุฏุฉ ุชุญููู ุงูุจูุงูุงุช ูุน ุงูููุชุฑุฉ ุงูุฌุฏูุฏุฉ
        });
    }

    // Functionality for Refresh button
    const refreshBtn = document.getElementById('refreshBtn');
    if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
            console.log('๐ ุชุญุฏูุซ ุงูุจูุงูุงุช...');
            loadMisconductData();
        });
    }

    // Functionality for Export Report button
    if (exportReportBtn) {
        exportReportBtn.addEventListener('click', () => {
            exportMisconductReport();
        });
    }

    // Import Excel (UI wiring)
    const importExcelBtn = document.getElementById('importExcelBtn');
    const excelInput = document.getElementById('excelInput');
    if (importExcelBtn && excelInput) {
        importExcelBtn.addEventListener('click', () => excelInput.click());
        excelInput.addEventListener('change', async (e) => {
            const files = Array.from(e.target.files || []);
            if (!files.length) return;
            await importMisconductExcelFiles(files);
            e.target.value = '';
        });
    }

    // Language toggle functionality
    if (langToggleBtn) {
        langToggleBtn.addEventListener('click', () => {
            const newLang = currentLang === 'ar' ? 'en' : 'ar';
            applyLanguage(newLang);
        });
    }
    
    console.log('โ ุชู ุชุญููู ุตูุญุฉ ุจูุงุบุงุช ุณูุก ุงูุชุนุงูู ุจูุฌุงุญ');
});
      