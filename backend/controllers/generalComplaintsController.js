const pool = require('../config/database');
const { logActivity } = require('./logsController');

// ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุดูุงูู ุงูุนุงูุฉ
const getGeneralComplaintsStats = async (req, res) => {
    try {
        const { dateFilter, status, department, complaintType, search } = req.query;
        
        console.log('๐ ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุดูุงูู ุงูุนุงูุฉ:', { dateFilter, status, department, complaintType, search });
        
        let whereClause = '';
        let params = [];
        
        // ุจูุงุก ุดุฑูุท ุงูุจุญุซ
        const conditions = [];
        
        // ูุนุงูุฌุฉ dateFilter
        if (dateFilter && dateFilter !== 'all') {
            const days = parseInt(dateFilter);
            if (!isNaN(days)) {
                const fromDate = new Date();
                fromDate.setDate(fromDate.getDate() - days);
                const toDate = new Date();
                
                conditions.push('c.CreatedAt BETWEEN ? AND ?');
                params.push(fromDate.toISOString().split('T')[0], toDate.toISOString().split('T')[0]);
            }
        }
        
        if (status && status !== 'ุงูุญุงูุฉ') {
            conditions.push('c.Status = ?');
            params.push(status);
        }
        
        if (department && department !== 'ุงููุณู') {
            conditions.push('d.DepartmentName = ?');
            params.push(department);
        }
        
        if (complaintType && complaintType !== 'ููุน ุงูุดููู') {
            conditions.push('cr.ReasonName = ?');
            params.push(complaintType);
        }
        
        if (search && search.trim() !== '') {
            conditions.push('(c.Title LIKE ? OR c.Description LIKE ? OR p.FullName LIKE ? OR p.NationalID LIKE ?)');
            const searchTerm = `%${search.trim()}%`;
            params.push(searchTerm, searchTerm, searchTerm, searchTerm);
        }
        
        if (conditions.length > 0) {
            whereClause = 'WHERE ' + conditions.join(' AND ');
        }
        
        // ุงูุงุณุชุนูุงู ุงูุฑุฆูุณู ููุฅุญุตุงุฆูุงุช
        const statsQuery = `
            SELECT 
                COUNT(*) as totalComplaints,
                SUM(CASE WHEN c.Status = 'open' THEN 1 ELSE 0 END) as newComplaints,
                SUM(CASE WHEN c.Status = 'in_progress' THEN 1 ELSE 0 END) as inProgressComplaints,
                SUM(CASE WHEN c.Status = 'responded' THEN 1 ELSE 0 END) as respondedComplaints,
                SUM(CASE WHEN c.Status = 'closed' THEN 1 ELSE 0 END) as closedComplaints,
                SUM(CASE WHEN c.Priority = 'urgent' THEN 1 ELSE 0 END) as urgentComplaints,
                SUM(CASE WHEN c.Priority = 'high' THEN 1 ELSE 0 END) as highPriorityComplaints,
                SUM(CASE WHEN c.Source = 'in_person' THEN 1 ELSE 0 END) as inPersonComplaints,
                SUM(CASE WHEN c.Source = 'call_center' THEN 1 ELSE 0 END) as callCenterComplaints
            FROM complaints c
            LEFT JOIN departments d ON c.DepartmentID = d.DepartmentID
            LEFT JOIN complaint_subtypes st ON c.SubtypeID = st.SubtypeID
            LEFT JOIN complaint_reasons cr ON st.ReasonID = cr.ReasonID
            LEFT JOIN patients p ON c.PatientID = p.PatientID
            ${whereClause}
        `;
        
        const [statsResult] = await pool.execute(statsQuery, params);
        const stats = statsResult[0];
        
        // ุฅุญุตุงุฆูุงุช ุญุณุจ ุงููุณู
        const departmentStatsQuery = `
            SELECT 
                d.DepartmentName,
                COUNT(c.ComplaintID) as count,
                SUM(CASE WHEN c.Status = 'closed' THEN 1 ELSE 0 END) as closed
            FROM departments d
            LEFT JOIN complaints c ON d.DepartmentID = c.DepartmentID
            ${whereClause.replace(/^WHERE/, whereClause ? 'AND' : 'WHERE')}
            GROUP BY d.DepartmentID, d.DepartmentName
            HAVING count > 0
            ORDER BY count DESC
            LIMIT 10
        `;
        
        const [departmentStats] = await pool.execute(departmentStatsQuery, params);
        
        // ุฅุญุตุงุฆูุงุช ุญุณุจ ููุน ุงูุดููู
        const typeStatsQuery = `
            SELECT 
                COALESCE(cr.ReasonName, 'ุบูุฑ ูุญุฏุฏ') as type,
                COUNT(c.ComplaintID) as count
            FROM complaints c
            LEFT JOIN departments d ON c.DepartmentID = d.DepartmentID
            LEFT JOIN complaint_subtypes st ON c.SubtypeID = st.SubtypeID
            LEFT JOIN complaint_reasons cr ON st.ReasonID = cr.ReasonID
            LEFT JOIN patients p ON c.PatientID = p.PatientID
            ${whereClause}
            GROUP BY cr.ReasonName
            ORDER BY count DESC
            LIMIT 10
        `;
        
        const [typeStats] = await pool.execute(typeStatsQuery, params);
        
        // ุฅุญุตุงุฆูุงุช ุดูุฑูุฉ (ุขุฎุฑ 6 ุฃุดูุฑ)
        const monthlyStatsQuery = `
            SELECT 
                DATE_FORMAT(c.CreatedAt, '%Y-%m') as month,
                COUNT(*) as count,
                SUM(CASE WHEN c.Status = 'closed' THEN 1 ELSE 0 END) as closed
            FROM complaints c
            LEFT JOIN departments d ON c.DepartmentID = d.DepartmentID
            LEFT JOIN complaint_subtypes st ON c.SubtypeID = st.SubtypeID
            LEFT JOIN complaint_reasons cr ON st.ReasonID = cr.ReasonID
            LEFT JOIN patients p ON c.PatientID = p.PatientID
            WHERE c.CreatedAt >= DATE_SUB(NOW(), INTERVAL 6 MONTH)
            ${whereClause ? 'AND ' + whereClause.substring(6) : ''}
            GROUP BY DATE_FORMAT(c.CreatedAt, '%Y-%m')
            ORDER BY month DESC
        `;
        
        const [monthlyStats] = await pool.execute(monthlyStatsQuery, params);
        
        console.log('โ ุชู ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุดูุงูู ุงูุนุงูุฉ ุจูุฌุงุญ');
        
        res.json({
            success: true,
            data: {
                overview: stats,
                departmentBreakdown: departmentStats,
                typeBreakdown: typeStats,
                monthlyTrend: monthlyStats
            }
        });
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุฅุญุตุงุฆูุงุช ุงูุดูุงูู ุงูุนุงูุฉ:', error);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'
        });
    }
};

// ุฌูุจ ุจูุงูุงุช ุงูุดูุงูู ููุชุตุฏูุฑ
const getGeneralComplaintsForExport = async (req, res) => {
    try {
        const { fromDate, toDate, status, department, complaintType, format } = req.query;
        
        console.log('๐ค ุชุตุฏูุฑ ุจูุงูุงุช ุงูุดูุงูู ุงูุนุงูุฉ:', { fromDate, toDate, status, department, complaintType, format });
        
        let whereClause = '';
        let params = [];
        const conditions = [];
        
        // ููุชุฑุฉ ุงูุชูุงุฑูุฎ
        if (fromDate && toDate) {
            conditions.push('DATE(c.CreatedAt) BETWEEN ? AND ?');
            params.push(fromDate, toDate);
        }
        
        if (status && status !== 'all') {
            conditions.push('c.Status = ?');
            params.push(status);
        }
        
        if (department && department !== 'all') {
            conditions.push('d.DepartmentName = ?');
            params.push(department);
        }
        
        if (complaintType && complaintType !== 'all') {
            conditions.push('cr.ReasonName = ?');
            params.push(complaintType);
        }
        
        if (conditions.length > 0) {
            whereClause = 'WHERE ' + conditions.join(' AND ');
        }
        
        const exportQuery = `
            SELECT 
                c.ComplaintNumber as 'ุฑูู ุงูุดููู',
                c.Title as 'ุงูุนููุงู',
                c.Description as 'ุงููุตู',
                CASE 
                    WHEN c.Status = 'open' THEN 'ููุชูุญุฉ'
                    WHEN c.Status = 'in_progress' THEN 'ููุฏ ุงููุนุงูุฌุฉ'
                    WHEN c.Status = 'responded' THEN 'ุชู ุงูุฑุฏ'
                    WHEN c.Status = 'closed' THEN 'ูุบููุฉ'
                    ELSE c.Status
                END as 'ุงูุญุงูุฉ',
                CASE 
                    WHEN c.Priority = 'low' THEN 'ููุฎูุถุฉ'
                    WHEN c.Priority = 'normal' THEN 'ุนุงุฏูุฉ'
                    WHEN c.Priority = 'high' THEN 'ุนุงููุฉ'
                    WHEN c.Priority = 'urgent' THEN 'ุนุงุฌูุฉ'
                    ELSE c.Priority
                END as 'ุงูุฃููููุฉ',
                CASE 
                    WHEN c.Source = 'in_person' THEN 'ุดุฎุตูุงู'
                    WHEN c.Source = 'call_center' THEN 'ูุฑูุฒ ุงูุงุชุตุงู'
                    ELSE c.Source
                END as 'ุงููุตุฏุฑ',
                d.DepartmentName as 'ุงููุณู',
                cr.ReasonName as 'ููุน ุงูุดููู',
                st.SubtypeName as 'ุงูููุน ุงููุฑุนู',
                p.FullName as 'ุงุณู ุงููุฑูุถ',
                p.NationalID as 'ุงููููุฉ ุงููุทููุฉ',
                p.Phone as 'ุฑูู ุงููุงุชู',
                creator.FullName as 'ููุดุฆ ุงูุดููู',
                assignee.FullName as 'ุงููููู ุจุงููุนุงูุฌุฉ',
                DATE_FORMAT(c.CreatedAt, '%Y-%m-%d %H:%i:%s') as 'ุชุงุฑูุฎ ุงูุฅูุดุงุก',
                DATE_FORMAT(c.UpdatedAt, '%Y-%m-%d %H:%i:%s') as 'ุชุงุฑูุฎ ุงูุชุญุฏูุซ',
                DATE_FORMAT(c.ClosedAt, '%Y-%m-%d %H:%i:%s') as 'ุชุงุฑูุฎ ุงูุฅุบูุงู',
                CASE 
                    WHEN c.ClosedAt IS NOT NULL THEN 
                        CONCAT(TIMESTAMPDIFF(DAY, c.CreatedAt, c.ClosedAt), ' ููู')
                    ELSE 'ูู ุชูุบูู ุจุนุฏ'
                END as 'ูุฏุฉ ุงููุนุงูุฌุฉ'
            FROM complaints c
            LEFT JOIN departments d ON c.DepartmentID = d.DepartmentID
            LEFT JOIN complaint_subtypes st ON c.SubtypeID = st.SubtypeID
            LEFT JOIN complaint_reasons cr ON st.ReasonID = cr.ReasonID
            LEFT JOIN patients p ON c.PatientID = p.PatientID
            LEFT JOIN users creator ON c.CreatedBy = creator.UserID
            LEFT JOIN (
                SELECT ca.ComplaintID, ca.AssignedToUserID,
                       ROW_NUMBER() OVER (PARTITION BY ca.ComplaintID ORDER BY ca.CreatedAt DESC) as rn
                FROM complaint_assignments ca
            ) latest_assignment ON c.ComplaintID = latest_assignment.ComplaintID AND latest_assignment.rn = 1
            LEFT JOIN users assignee ON latest_assignment.AssignedToUserID = assignee.UserID
            ${whereClause}
            ORDER BY c.CreatedAt DESC
            LIMIT 10000
        `;
        
        const [exportData] = await pool.execute(exportQuery, params);
        
        // ุชุณุฌูู ุนูููุฉ ุงูุชุตุฏูุฑ
        const userID = req.user?.UserID || req.user?.EmployeeID;
        if (userID) {
            await logActivity(userID, null, 'COMPLAINTS_EXPORTED', {
                recordCount: exportData.length,
                filters: { fromDate, toDate, status, department, complaintType },
                format: format || 'json'
            });
        }
        
        console.log(`โ ุชู ุชุตุฏูุฑ ${exportData.length} ุดููู`);
        
        res.json({
            success: true,
            data: exportData,
            totalRecords: exportData.length,
            exportedAt: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชุตุฏูุฑ ุจูุงูุงุช ุงูุดูุงูู:', error);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'
        });
    }
};

// ุฌูุจ ุชูุงุตูู ุดููู ูุญุฏุฏุฉ
const getComplaintDetails = async (req, res) => {
    try {
        const { complaintId } = req.params;
        
        console.log('๐ ุฌูุจ ุชูุงุตูู ุงูุดููู:', complaintId);
        
        // ุฌูุจ ุชูุงุตูู ุงูุดููู ุงูุฃุณุงุณูุฉ
        const [complaints] = await pool.execute(`
            SELECT 
                c.*,
                d.DepartmentName,
                cr.ReasonName,
                st.SubtypeName,
                p.FullName as PatientFullName,
                p.NationalID as PatientNationalID,
                p.Phone as PatientPhone,
                p.Email as PatientEmail,
                p.Gender as PatientGender,
                p.DateOfBirth as PatientDateOfBirth,
                creator.FullName as CreatedByName,
                creator.Email as CreatedByEmail
            FROM complaints c
            LEFT JOIN departments d ON c.DepartmentID = d.DepartmentID
            LEFT JOIN complaint_subtypes st ON c.SubtypeID = st.SubtypeID
            LEFT JOIN complaint_reasons cr ON st.ReasonID = cr.ReasonID
            LEFT JOIN patients p ON c.PatientID = p.PatientID
            LEFT JOIN users creator ON c.CreatedBy = creator.UserID
            WHERE c.ComplaintID = ?
        `, [complaintId]);
        
        if (complaints.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'ุงูุดููู ุบูุฑ ููุฌูุฏุฉ'
            });
        }
        
        const complaint = complaints[0];
        
        // ุฌูุจ ุงููุฑููุงุช
        const [attachments] = await pool.execute(`
            SELECT AttachmentID, FileURL, FileName, MimeType, SizeBytes, CreatedAt
            FROM complaint_attachments 
            WHERE ComplaintID = ?
            ORDER BY CreatedAt ASC
        `, [complaintId]);
        
        // ุฌูุจ ุงูุฑุฏูุฏ
        const [replies] = await pool.execute(`
            SELECT 
                cr.ReplyID,
                cr.Body,
                cr.AttachmentURL,
                cr.CreatedAt,
                u.FullName as AuthorName,
                u.Email as AuthorEmail
            FROM complaint_replies cr
            LEFT JOIN users u ON cr.AuthorUserID = u.UserID
            WHERE cr.ComplaintID = ?
            ORDER BY cr.CreatedAt ASC
        `, [complaintId]);
        
        // ุฌูุจ ุชุงุฑูุฎ ุงูุชุบููุฑุงุช
        const [history] = await pool.execute(`
            SELECT 
                ch.HistoryID,
                ch.PrevStatus,
                ch.NewStatus,
                ch.FieldChanged,
                ch.OldValue,
                ch.NewValue,
                ch.CreatedAt,
                u.FullName as ActorName
            FROM complaint_history ch
            LEFT JOIN users u ON ch.ActorUserID = u.UserID
            WHERE ch.ComplaintID = ?
            ORDER BY ch.CreatedAt DESC
        `, [complaintId]);
        
        // ุฌูุจ ุงูุชููููุงุช
        const [assignments] = await pool.execute(`
            SELECT 
                ca.AssignmentID,
                ca.Notes,
                ca.CreatedAt,
                assigned_to.FullName as AssignedToName,
                assigned_to.Email as AssignedToEmail,
                assigned_by.FullName as AssignedByName
            FROM complaint_assignments ca
            LEFT JOIN users assigned_to ON ca.AssignedToUserID = assigned_to.UserID
            LEFT JOIN users assigned_by ON ca.AssignedByUserID = assigned_by.UserID
            WHERE ca.ComplaintID = ?
            ORDER BY ca.CreatedAt DESC
        `, [complaintId]);
        
        console.log('โ ุชู ุฌูุจ ุชูุงุตูู ุงูุดููู ุจูุฌุงุญ');
        
        res.json({
            success: true,
            data: {
                complaint,
                attachments,
                replies,
                history,
                assignments
            }
        });
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุชูุงุตูู ุงูุดููู:', error);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'
        });
    }
};

// ุฌูุจ ููุงุฆู ุงูููุงุชุฑ (ุงูุฃูุณุงูุ ุฃููุงุน ุงูุดูุงููุ ุฅูุฎ)
const getFilterOptions = async (req, res) => {
    try {
        console.log('๐ ุฌูุจ ุฎูุงุฑุงุช ุงูููุงุชุฑ');
        
        // ุฌูุจ ุงูุฃูุณุงู
        const [departments] = await pool.execute(`
            SELECT DISTINCT d.DepartmentID, d.DepartmentName
            FROM departments d
            INNER JOIN complaints c ON d.DepartmentID = c.DepartmentID
            ORDER BY d.DepartmentName
        `);
        
        // ุฌูุจ ุฃููุงุน ุงูุดูุงูู
        const [complaintTypes] = await pool.execute(`
            SELECT DISTINCT cr.ReasonID, cr.ReasonName
            FROM complaint_reasons cr
            INNER JOIN complaint_subtypes st ON cr.ReasonID = st.ReasonID
            INNER JOIN complaints c ON st.SubtypeID = c.SubtypeID
            ORDER BY cr.ReasonName
        `);
        
        // ุฌูุจ ุญุงูุงุช ุงูุดูุงูู ุงููุณุชุฎุฏูุฉ
        const [statuses] = await pool.execute(`
            SELECT DISTINCT Status
            FROM complaints
            ORDER BY Status
        `);
        
        const statusOptions = statuses.map(s => ({
            value: s.Status,
            label: {
                'open': 'ููุชูุญุฉ',
                'in_progress': 'ููุฏ ุงููุนุงูุฌุฉ', 
                'responded': 'ุชู ุงูุฑุฏ',
                'closed': 'ูุบููุฉ'
            }[s.Status] || s.Status
        }));
        
        console.log('โ ุชู ุฌูุจ ุฎูุงุฑุงุช ุงูููุงุชุฑ ุจูุฌุงุญ');
        
        res.json({
            success: true,
            data: {
                departments,
                complaintTypes,
                statuses: statusOptions
            }
        });
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุฎูุงุฑุงุช ุงูููุงุชุฑ:', error);
        res.status(500).json({
            success: false,
            message: 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'
        });
    }
};

module.exports = {
    getGeneralComplaintsStats,
    getGeneralComplaintsForExport,
    getComplaintDetails,
    getFilterOptions
};